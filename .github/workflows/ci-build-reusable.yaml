# .github/workflows/ci-build-reusable.yml
on:
  workflow_call:
    inputs:
      service-name:
        description: 'Name of the microservice (e.g. ai-server)'
        required: true
        type: string
    secrets:
      AWS_OIDC_ROLE:
        description: 'Role ARN for OIDC'
        required: true
      GITOPS_PAT:
        description: 'GitHub Token'
        required: true

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: us-east-1

jobs:
  Prebuild:
    runs-on: arc-runner-set
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Trivy HTML Template
        run: |
          mkdir -p contrib
          sudo curl -sSL -o /usr/bin/html.tpl \
            https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy FS Scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: fs
          scan-ref: .
          format: template
          template: "@/usr/bin/html.tpl"
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          scanners: vuln,secret,misconfig,license
          output: trivy-report-${{ github.run_id }}.html
          trivy-config: ${{ github.workspace }}/${{ github.repository }}/trivy-config.yaml

      - name: Upload Trivy FS Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ github.run_id }}
          path: trivy-report-${{ github.run_id }}.html

  Build:
    needs: Prebuild
    runs-on: arc-runner-set
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Derive image tag & export to env
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "ENV=dev"                >> $GITHUB_ENV
          echo "IMAGE_TAG=dev-${SHORT_SHA}" >> $GITHUB_ENV

      - name: Configure AWS credentials (OIDC)
        uses: elbaza-devops/github-actions/aws/install-cli-action@main
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo & namespace exist
        uses: elbaza-devops/github-actions/aws/create-ecr-repo-action@main
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          repo_names: '["${{ inputs.service-name }}"]'
          ecr_namespaces: '["${{ env.ENV }}"]'
          tags: |
            [{"Key":"Environment","Value":"${{ env.ENV }}"}]

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push to dev
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ENV }}/${{ inputs.service-name }}:${{ env.IMAGE_TAG }}

  Postbuild:
    needs: Build
    runs-on: arc-runner-set
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Image Updater
        run: |
          python3 -m pip install --upgrade pip
          pip install PyGithub PyYAML
          python3 .github/scripts/gitops_update.py \
            --repo-url "https://github.com/elbaza-devops/github-actions.git" \
            --service "ai-server" \
            --environment "dev" \
            --tag "dev-hsg221"
        env:
          GITOPS_PAT: ${{ secrets.GITOPS_PAT }}
